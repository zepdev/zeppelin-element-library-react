'use strict';

var p = require('path');
var requireFromString = require('require-from-string');
var objectToAST = require('./object-to-ast');

module.exports = {
  getReplacement,
  transformAndRequire
};

function transformAndRequire(_ref) {
  var stringToPreval = _ref.string,
      fileOpts = _ref.fileOpts,
      _ref$args = _ref.args,
      args = _ref$args === undefined ? [] : _ref$args,
      babel = _ref.babel;
  var filename = fileOpts.filename,
      plugins = fileOpts.plugins,
      presets = fileOpts.presets;

  var _babel$transform = babel.transform(stringToPreval, {
    filename,
    plugins,
    presets
  }),
      code = _babel$transform.code;

  var mod = requireFromString(code, filename);
  mod = mod && mod.__esModule ? mod.default : mod;

  if (typeof mod === 'function') {
    mod = mod.apply(undefined, args);
  } else if (args.length) {
    throw new Error(`\`preval.require\`-ed module (${p.relative(process.cwd(), filename)}) cannot accept arguments because it does not export a function. You passed the arguments: ${args.join(', ')}`);
  }

  return mod;
}

function getReplacement(_ref2) {
  var string = _ref2.string,
      fileOpts = _ref2.fileOpts,
      args = _ref2.args,
      babel = _ref2.babel;

  var mod = transformAndRequire({ string, fileOpts, args, babel });
  return objectToAST(mod, { babel, fileOptions: fileOpts });
}